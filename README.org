* About

[[https://github.com/jakub-stastny/blog/actions/workflows/test.yml][https://github.com/jakub-stastny/blog/actions/workflows/test.yml/badge.svg]]

Parser of my blog post Org-mode-based format. It takes Org mode format as the input and gives JSON with fields =title=, =excerpt= and =body= as the output. It will also surface any top-level

My raw blog posts are available [[https://github.com/jakub-stastny/data.blog][here]], they can serve as an example of expected input.

For =DATE=, see https://orgmode.org/manual/Export-Settings.html

** Format

#+BEGIN_SRC org
#+DATE: 2021-06-11T18:37:05+05:00

* Blog post title

This is the excerpt of the blog post.

** First heading

Content
#+END_SRC

#+BEGIN_SRC javascript
// TODO: Make it a Rust example once I know how the smeg to program in it.
const post = parse(org_string, timezone)
console.log(JSON.stringify(post))
#+END_SRC

#+BEGIN_SRC json
{
  "title": "Blog post title",
  "excerpt": "This is the excerpt of the blog post.",
  "body": "** First heading\n\nContent",
  "published_timestamp": 1623454660
}
#+END_SRC

** Literate programming

In case you're wondering where are all the Elm files, you have to tangle code blocks from [[https://orgmode.org][Org mode]] files in =src= into actual Elm files using Org mode in Emacs.

This allows not only better documentation, since Org mode files are structured text, unlike comments, but also it allows us to have code and related tests at the same Org file, so we can keep related things in one place. These get tangled into separate Elm files of course.

Take [[./src/Post.org][src/Post.org]] as an example. It contains the documentation, the code and the tests.

Having high-level documentation in Org mode allows not only heading, links and various formatting, but also inclusion of images such as graphs. So you don't have to leave the context of whatever you're working on â€“ it's always at hand.

Org mode files do get long, but that's OK, since Org mode is an outliner and allows hiding sections of code you're not working on.

[[./doc/emacs-org-mode.jpg]]

* Setup

See [[./.env/README.org][.env/README.org]] for literate DevOps instructions on setting the project.

Note that this setup is more of an extension of dotfiles (and requires specific initialisation code which I have in [[https://github.com/jakub-stastny/dotfiles][my dotfiles]]), it doesn't deal with installing Elm and the dependencies, for which I use [[https://github.com/jakub-stastny/docker-project-manager][docker-project-manager]].

* Code documentation

This code is thouroughly documented. Just dive into the Org mode files in =src=!

* Pending matters
** TODO Build on GitHub CI

Update the badge.

** TODO include Orgize
** TODO compile to WASM
